class tutorial {

    a_subtraction(){
        def a = 8;
        def b = 2;
        def x = b - a;
        def y = a - 3;
        return x;
    }

    b_branches(a, b) {
        def x = 0;
        b = 0;
        if (a < b)
           x = x * 7;
        else
           x = -7;
        def y = x / x;
    }

    c_array_access(y){
        def x = 5;
        y = x + 0;
        def z = y - 2;
        def length = 100;
        def array = new int[length];
        while(x < length){
            array[x] = x;
            x = x + 1;
        }
        return y;
    }

    d_binary_search_with_length_defined(array, arr_len, value){
        arr_len = 10000;
        def num = 0;
        def num2 = arr_len - 1;
        def result=-1;
        while(num <= num2)
        {
            def index = num + num2;
            index = index / 2;
            def num4 = array + index;
            if(value == num4)
                result = index;
            if(num4 < value)
                num = index + 1;
            else
                num2 = index - 1;
        }
        if(result=-1)
            result = num;
        return num;
    }

    e_binary_search(array, arr_len, value){
        def num = 0;
        if( arr_len > 0)
        {
            def num2 = arr_len - 1;
            def result=-1;
            while(num <= num2)
            {
                /*se noi abbiamo che num: [0, +inf] e num2: [-1, +inf] ma sappiamo che num <= num2, num2
                dovrebbe diventare [0, +inf] nel ramo then. siccome questo non lo fa ho dovuto aggiungere un controllo,
                ma in realtÃ  sarebbero da sistemare i valueEnvironment*/
                if(num2>-1) // never happen but we need this to made the analysis understand that could never happen
                {
                    def index = (num + num2) / 2;
                    def num4 = array + index;
                    if(value == num4)
                        result = index;
                    if(num4 < value)
                        num = index + 1;
                    else
                        num2 = index - 1;
                }
            }
            if(result=-1)
                result = num;
        }
        else
            num = -1;
        return num;
    }

}